[tool.uv]
override-dependencies = [
    "tenacity>=9.0.0",
    "aiofiles>=24.1.0",
    "chainlit>=2.0.1",
    "httpx>=0.27.0",
]
[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
dam = { workspace = true }
domarkx = { workspace = true }

[dependency-groups]
dev = [
    "pyright",
    "mypy",
    "ruff",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "typer",
    "rich",
    "polars",
    "pytest_mock",
    "poethepoet",
    "packaging",
    "grpcio-tools~=1.70.0",
    "mypy-protobuf",
    "cookiecutter",
    "tomli",
    "tomli-w",
    "chainlit",
    "streamlit",

    # Documentation
    "myst-nb==1.1.2",
    "pydata-sphinx-theme==0.16.0",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx",
    "sphinxcontrib-apidoc",
    "autodoc_pydantic~=2.2",
    "pygments",
    "sphinxext-rediraffe",
    "opentelemetry-instrumentation-openai",
    "diskcache",
    "redis",
    "sphinx-autobuild",
]

[tool.ruff]
line-length = 160
fix = true

target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["E", "F"]
ignore = ["E501", "F841", "F401", "F811", "E402"]

[tool.ruff.lint.per-file-ignores]
"docs/**.ipynb" = ["T20"]

[tool.ruff.lint.flake8-tidy-imports]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"unittest".msg = "Use `pytest` instead."

[tool.mypy]
strict = true
python_version = "3.10"
ignore_missing_imports = true

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true

[tool.pyright]
include = ["src", "tests", "samples"]
exclude = ["samples/core_xlang_hello_python_agent/protos"]
typeCheckingMode = "strict"
reportUnnecessaryIsInstance = false
reportMissingTypeStubs = false

[tool.nbqa.addopts]
mypy = [
    "--disable-error-code=top-level-await"
]

[tool.poe.tasks]
fmt = "python run_task_in_pkgs_if_exist.py fmt"
format.ref = "fmt"
lint = "python run_task_in_pkgs_if_exist.py lint"
pyright = "python run_task_in_pkgs_if_exist.py pyright"
mypy = "python run_task_in_pkgs_if_exist.py mypy"
test = "python run_task_in_pkgs_if_exist.py test"
check = ["fmt", "lint", "test"]
