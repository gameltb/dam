[tool.uv]
index-strategy = 'unsafe-best-match'
extra-index-url = [
    'https://pypi.org/simple',
    'https://download.pytorch.org/whl/cpu',
]

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
dam = { workspace = true }
dam_archive = { workspace = true }
dam_app = { workspace = true }
dam_media_image = { workspace = true }
dam_media_audio = { workspace = true }
dam_media_transcode = { workspace = true }
dam_psp = { workspace = true }
dam_semantic = { workspace = true }
dam_fs = { workspace = true }
dam_sire = { workspace = true }
dam_source = { workspace = true }
dam_test_utils = { workspace = true }
domarkx = { workspace = true }
sire = { workspace = true }
sire_pipelines = { workspace = true }

[dependency-groups]
dev = [
    "pyright",
    "mypy",
    "ruff",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "pytest-postgresql",
    "typer",
    "rich",
    "polars",
    "pytest_mock",
    "poethepoet>=0.20.0",
    "packaging",
    "grpcio-tools~=1.70.0",
    "mypy-protobuf",
    "types-PyYAML",
    "cookiecutter",
    "tomli",
    "tomli-w",
    "chainlit",
    "streamlit",

    # Documentation
    "myst-nb==1.1.2",
    "pydata-sphinx-theme==0.16.0",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx",
    "sphinxcontrib-apidoc",
    "autodoc_pydantic~=2.2",
    "pygments",
    "sphinxext-rediraffe",
    "opentelemetry-instrumentation-openai",
    "diskcache",
    "redis",
    "sphinx-autobuild",
    "deptry",
]

[tool.ruff]
line-length = 120
fix = true

target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["E", "F", "W", "B", "Q", "I", "ASYNC", "LOG", "G", "PT", "RET", "SIM", "ARG", "PTH", "N",  "RUF", "PL", "UP", "D", "TID251", "T20", "PLC0415", "PYI"]
ignore = ["E501", "D212", "D203", "D100"]
unfixable = ["TID251"]

[tool.ruff.lint.pylint]
max-statements = 100
max-args = 10
max-returns = 10

[tool.ruff.lint.per-file-ignores]
"docs/**.ipynb" = ["T20"]
"**/tests/*" = ["PLR0915","PLR2004"]
"py.typed" = ["D100"]

[tool.ruff.lint.flake8-tidy-imports]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"unittest".msg = "Use `pytest` or `pytest` plugin instead."

[tool.mypy]
strict = true
python_version = "3.12"
ignore_missing_imports = true

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = true

[tool.pyright]
include = ["src", "tests", "samples"]
typeCheckingMode = "strict"
reportUnnecessaryIsInstance = false
reportMissingTypeStubs = false

[tool.nbqa.addopts]
mypy = [
    "--disable-error-code=top-level-await"
]

[tool.poe.tasks]
fmt = "python run_task_in_pkgs_if_exist.py fmt"
format.ref = "fmt"
lint = "python run_task_in_pkgs_if_exist.py lint"
fix = "python run_task_in_pkgs_if_exist.py fix"
pyright = "python run_task_in_pkgs_if_exist.py pyright"
mypy = "python run_task_in_pkgs_if_exist.py mypy"
test = "python run_task_in_pkgs_if_exist.py test"
test-cov = "python run_task_in_pkgs_if_exist.py test-cov"
deptry = "python run_task_in_pkgs_if_exist.py deptry"
check-full = { sequence = ["fmt --package ${package}", "lint --package ${package}", "pyright --package ${package}", "mypy --package ${package}", "deptry --package ${package}", "test-cov --package ${package}"], args=[{name="package", help="The package to run checks on"}] }
check = { sequence = ["fmt --package ${package}", "lint --package ${package}", "pyright --package ${package}", "deptry --package ${package}", "test --package ${package}"], args=[{name="package", help="The package to run checks on"}] }
check-ci = { sequence = ["fmt --package ${package}", "lint --package ${package}", "pyright --package ${package}", "deptry --package ${package}", "test-cov --package ${package}"], args=[{name="package", help="The package to run checks on"}] }
run = "python run_task_in_pkgs_if_exist.py run"

[tool.pytest.ini_options]
addopts = "-p no:serial"
markers = [
    "serial: mark a test as serial",
]

