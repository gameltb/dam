import logging
import shutil
import subprocess
from dataclasses import dataclass
from typing import ClassVar, Dict, List, Optional

from dam.commands.analysis_commands import AnalysisCommand
from dam.commands.core import BaseCommand
from dam.models.core.entity import Entity
from dam.system_events import BaseSystemEvent


@dataclass
class AutoTagEntityCommand(BaseCommand[None, BaseSystemEvent]):
    """A command to trigger auto-tagging for an entity."""

    entity: Entity


@dataclass
class ExtractExifMetadataCommand(AnalysisCommand[None, BaseSystemEvent]):
    """
    A command to trigger metadata extraction for an entity.
    Inherits entity_id, depth, and stream from AnalysisCommand.
    """

    _cached_extensions: ClassVar[Optional[List[str]]] = None

    @classmethod
    def get_supported_types(cls) -> Dict[str, List[str]]:
        """
        Returns a dictionary of supported file extensions for EXIF data.
        The list is generated by running `exiftool -listr` at runtime and cached.
        """
        if cls._cached_extensions is not None:
            return {"mimetypes": [], "extensions": cls._cached_extensions}

        exiftool_path = shutil.which("exiftool")
        if not exiftool_path:
            logging.warning(
                "exiftool command not found in PATH. Cannot determine supported file types for metadata extraction."
            )
            cls._cached_extensions = []
            return {"mimetypes": [], "extensions": []}

        try:
            result = subprocess.run(
                [exiftool_path, "-listr"],
                capture_output=True,
                text=True,
                check=True,
                encoding="utf-8",
            )
            lines: List[str] = result.stdout.strip().split("\n")
            extensions: List[str] = []
            if len(lines) > 1:
                # Skip the header line and process the rest
                for line in lines[1:]:
                    extensions.extend(line.strip().split())

            cls._cached_extensions = sorted([f".{ext.lower()}" for ext in extensions if ext])
        except (subprocess.CalledProcessError, FileNotFoundError, UnicodeDecodeError) as e:
            logging.error(f"Failed to get supported file types from exiftool: {e}")
            cls._cached_extensions = []

        return {"mimetypes": [], "extensions": cls._cached_extensions}
