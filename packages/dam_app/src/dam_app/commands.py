"""Defines custom commands for the DAM application."""

import logging
import shutil
import subprocess
from dataclasses import dataclass
from typing import ClassVar

from dam.commands.analysis_commands import AnalysisCommand
from dam.commands.core import BaseCommand, EntityCommand
from dam.system_events.base import BaseSystemEvent

logger = logging.getLogger(__name__)


@dataclass
class AnalyzeEntityCommand(EntityCommand[None, BaseSystemEvent]):
    """A command to analyze an entity."""

    pass


@dataclass
class AutoTagEntityCommand(EntityCommand[None, BaseSystemEvent]):
    """A command to automatically tag an entity."""

    pass


@dataclass
class ExtractExifMetadataCommand(AnalysisCommand[None, BaseSystemEvent]):
    """
    A command to trigger metadata extraction for an entity.

    Inherits entity_id, depth, and stream from AnalysisCommand.
    """

    _cached_extensions: ClassVar[list[str] | None] = None

    @classmethod
    def get_supported_types(cls) -> dict[str, list[str]]:
        """
        Return a dictionary of supported file extensions for EXIF data.

        The list is generated by running `exiftool -listr` at runtime and cached.
        """
        if cls._cached_extensions is not None:
            return {"mimetypes": [], "extensions": cls._cached_extensions}

        exiftool_path = shutil.which("exiftool")
        if not exiftool_path:
            logger.warning(
                "exiftool command not found in PATH. Cannot determine supported file types for metadata extraction."
            )
            cls._cached_extensions = []
            return {"mimetypes": [], "extensions": []}

        try:
            result = subprocess.run(
                [exiftool_path, "-listr"],
                capture_output=True,
                text=True,
                check=True,
                encoding="utf-8",
            )
            lines: list[str] = result.stdout.strip().split("\n")
            extensions: list[str] = []
            if len(lines) > 1:
                # Skip the header line and process the rest
                for line in lines[1:]:
                    extensions.extend(line.strip().split())

            cls._cached_extensions = sorted([f".{ext.lower()}" for ext in extensions if ext])
        except (subprocess.CalledProcessError, FileNotFoundError, UnicodeDecodeError) as e:
            logger.error("Failed to get supported file types from exiftool: %s", e)
            cls._cached_extensions = []

        return {"mimetypes": [], "extensions": cls._cached_extensions}


@dataclass
class CheckExifMetadataCommand(EntityCommand[bool, BaseSystemEvent]):
    """A command to check if an entity has extracted EXIF metadata."""

    pass


@dataclass
class RemoveExifMetadataCommand(EntityCommand[None, BaseSystemEvent]):
    """A command to remove the extracted EXIF metadata from an entity."""

    pass


@dataclass
class ExportDbCommand(BaseCommand[None, BaseSystemEvent]):
    """A command to export the database to a file."""

    pass


@dataclass
class MigratePathsCommand(BaseCommand[None, BaseSystemEvent]):
    """A command to migrate existing file paths to the new path tree structure."""

    pass
