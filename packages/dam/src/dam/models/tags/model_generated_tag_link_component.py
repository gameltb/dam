
from sqlalchemy import Float, ForeignKey, String, UniqueConstraint
from sqlalchemy.orm import Mapped, mapped_column

from ..core import BaseComponent


class ModelGeneratedTagLinkComponent(BaseComponent):
    """
    Links an Entity to a TagConcept, specifically for tags generated by an AI model.
    This component stores the tag suggested by a model, along with the model's name
    and its confidence in that suggestion.
    """

    __tablename__ = "component_model_generated_tag_link"

    entity_id: Mapped[int] = mapped_column(ForeignKey("entities.id", ondelete="CASCADE"), nullable=False, index=True)
    tag_concept_id: Mapped[int] = mapped_column(
        ForeignKey("component_tag_concept.id", ondelete="CASCADE"), nullable=False, index=True
    )

    # Name of the model that generated this tag link (e.g., "wd-v1-4-moat-tagger-v2")
    source_model_name: Mapped[str] = mapped_column(String(), nullable=False, index=True)

    # Confidence score from the model for this specific tag suggestion
    confidence: Mapped[float | None] = mapped_column(Float, nullable=True)

    # Relationships (optional, but can be useful for ORM-level access)
    # entity: Mapped["Entity"] = relationship(back_populates="model_generated_tags")
    # tag_concept: Mapped["TagConceptComponent"] = relationship()

    __table_args__ = (
        UniqueConstraint(
            "entity_id",
            "tag_concept_id",
            "source_model_name",
            name="uq_entity_tag_concept_model",
        ),
    )

    def __repr__(self) -> str:
        return (
            f"ModelGeneratedTagLinkComponent(id={self.id}, entity_id={self.entity_id}, "
            f"tag_concept_id={self.tag_concept_id}, source_model_name='{self.source_model_name}', "
            f"confidence={self.confidence:.4f})"
        )


# Note: For relationships to work uncommented, forward references might need
# 'Entity' and 'TagConceptComponent' to be imported or defined if not using strings,
# and back_populates attributes would need to be defined on the related models.
# For now, keeping them commented as direct FKs are sufficient for service layer.
